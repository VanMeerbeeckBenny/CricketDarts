// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.CricketDarts.Infrastructure.Data;

#nullable disable

namespace Pin.CricketDarts.Infrastructure.Migrations
{
    [DbContext(typeof(DbDartsContext))]
    [Migration("20221116112007_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MatchPlayer", b =>
                {
                    b.Property<Guid>("MatchesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MatchesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("MatchPlayer");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActiveGame")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerOneScore")
                        .HasColumnType("int");

                    b.Property<int>("PlayerTwoScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            IsActiveGame = false,
                            PlayerOneScore = 0,
                            PlayerTwoScore = 0,
                            TimeStamp = new DateTime(2022, 11, 16, 12, 20, 7, 376, DateTimeKind.Local).AddTicks(128)
                        },
                        new
                        {
                            Id = new Guid("ad6626b8-4720-443a-8800-62087fe9a7a2"),
                            IsActiveGame = false,
                            PlayerOneScore = 0,
                            PlayerTwoScore = 0,
                            TimeStamp = new DateTime(2022, 11, 16, 14, 20, 7, 376, DateTimeKind.Local).AddTicks(164)
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Player");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fef54ec-e3b1-4c48-95e3-db667b4c4a42"),
                            Name = "Benny"
                        },
                        new
                        {
                            Id = new Guid("b56310f0-76eb-4adb-8513-d9effa9d9cfa"),
                            Name = "Yoran"
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerThrow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ThrowId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ThrowId");

                    b.ToTable("PlayerThrows");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec4749bf-d8dc-4ab1-9405-5980c2d2e5e9"),
                            MatchId = new Guid("ad6626b8-4720-443a-8800-62087fe9a7a2"),
                            PlayerId = new Guid("6fef54ec-e3b1-4c48-95e3-db667b4c4a42"),
                            ThrowId = new Guid("9e32ca82-ee5b-41d7-8329-60f858c93138"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ab92f21-348a-4537-9c8f-34aa7bcc3584"),
                            MatchId = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            PlayerId = new Guid("6fef54ec-e3b1-4c48-95e3-db667b4c4a42"),
                            ThrowId = new Guid("1c5aff2a-990a-4727-9e17-fc01c537f16f"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9e8c0c4d-5cd6-4a05-aa8b-f396e46d0abf"),
                            MatchId = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            PlayerId = new Guid("6fef54ec-e3b1-4c48-95e3-db667b4c4a42"),
                            ThrowId = new Guid("c254f168-90c6-44a5-9271-52bdfa1332af"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b6a0a05d-ad89-4417-905d-d8dc3ace8197"),
                            MatchId = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            PlayerId = new Guid("6fef54ec-e3b1-4c48-95e3-db667b4c4a42"),
                            ThrowId = new Guid("97cececf-3ed2-496c-8706-2df4a3b1c97e"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c22422cc-98f3-4463-bd7c-163209636181"),
                            MatchId = new Guid("ad6626b8-4720-443a-8800-62087fe9a7a2"),
                            PlayerId = new Guid("b56310f0-76eb-4adb-8513-d9effa9d9cfa"),
                            ThrowId = new Guid("c08780c1-5e2e-4a76-9457-7a1f40955474"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cdb63195-e4ea-44b9-833b-87759d01ecdc"),
                            MatchId = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            PlayerId = new Guid("b56310f0-76eb-4adb-8513-d9effa9d9cfa"),
                            ThrowId = new Guid("63d9e6da-d4c6-43c2-ade9-30d5f52bfeba"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("71c4107d-bb73-4e69-b7f6-7ee3ead4208c"),
                            MatchId = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            PlayerId = new Guid("b56310f0-76eb-4adb-8513-d9effa9d9cfa"),
                            ThrowId = new Guid("3c11ce76-b3ca-44f4-bdea-cacf04bc9e7d"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c74f8b59-5abe-466a-a41b-544b74db7087"),
                            MatchId = new Guid("d9e3adf9-3432-4362-a1b2-761d4f85cbb6"),
                            PlayerId = new Guid("b56310f0-76eb-4adb-8513-d9effa9d9cfa"),
                            ThrowId = new Guid("02baa8dd-1b97-4991-a861-0620bd15b09b"),
                            TimeStamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Throw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Bull")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Eighteen")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Fifteen")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Nineteen")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Seventeen")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Sixteen")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Twenty")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Throws");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e32ca82-ee5b-41d7-8329-60f858c93138"),
                            Bull = (byte)0,
                            Eighteen = (byte)0,
                            Fifteen = (byte)0,
                            Nineteen = (byte)0,
                            Seventeen = (byte)3,
                            Sixteen = (byte)0,
                            Twenty = (byte)2
                        },
                        new
                        {
                            Id = new Guid("1c5aff2a-990a-4727-9e17-fc01c537f16f"),
                            Bull = (byte)0,
                            Eighteen = (byte)0,
                            Fifteen = (byte)2,
                            Nineteen = (byte)0,
                            Seventeen = (byte)0,
                            Sixteen = (byte)0,
                            Twenty = (byte)3
                        },
                        new
                        {
                            Id = new Guid("c254f168-90c6-44a5-9271-52bdfa1332af"),
                            Bull = (byte)0,
                            Eighteen = (byte)0,
                            Fifteen = (byte)0,
                            Nineteen = (byte)0,
                            Seventeen = (byte)0,
                            Sixteen = (byte)3,
                            Twenty = (byte)2
                        },
                        new
                        {
                            Id = new Guid("97cececf-3ed2-496c-8706-2df4a3b1c97e"),
                            Bull = (byte)0,
                            Eighteen = (byte)1,
                            Fifteen = (byte)0,
                            Nineteen = (byte)2,
                            Seventeen = (byte)0,
                            Sixteen = (byte)0,
                            Twenty = (byte)0
                        },
                        new
                        {
                            Id = new Guid("c08780c1-5e2e-4a76-9457-7a1f40955474"),
                            Bull = (byte)2,
                            Eighteen = (byte)0,
                            Fifteen = (byte)0,
                            Nineteen = (byte)0,
                            Seventeen = (byte)0,
                            Sixteen = (byte)0,
                            Twenty = (byte)2
                        },
                        new
                        {
                            Id = new Guid("63d9e6da-d4c6-43c2-ade9-30d5f52bfeba"),
                            Bull = (byte)0,
                            Eighteen = (byte)0,
                            Fifteen = (byte)3,
                            Nineteen = (byte)0,
                            Seventeen = (byte)0,
                            Sixteen = (byte)0,
                            Twenty = (byte)2
                        },
                        new
                        {
                            Id = new Guid("3c11ce76-b3ca-44f4-bdea-cacf04bc9e7d"),
                            Bull = (byte)0,
                            Eighteen = (byte)2,
                            Fifteen = (byte)3,
                            Nineteen = (byte)0,
                            Seventeen = (byte)0,
                            Sixteen = (byte)0,
                            Twenty = (byte)0
                        },
                        new
                        {
                            Id = new Guid("02baa8dd-1b97-4991-a861-0620bd15b09b"),
                            Bull = (byte)0,
                            Eighteen = (byte)1,
                            Fifteen = (byte)0,
                            Nineteen = (byte)2,
                            Seventeen = (byte)0,
                            Sixteen = (byte)0,
                            Twenty = (byte)0
                        });
                });

            modelBuilder.Entity("MatchPlayer", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Match", null)
                        .WithMany()
                        .HasForeignKey("MatchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.PlayerThrow", b =>
                {
                    b.HasOne("Pin.CricketDarts.Core.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Player", "Player")
                        .WithMany("AllThrows")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pin.CricketDarts.Core.Entities.Throw", "Throws")
                        .WithMany("PlayerThrows")
                        .HasForeignKey("ThrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Throws");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Player", b =>
                {
                    b.Navigation("AllThrows");
                });

            modelBuilder.Entity("Pin.CricketDarts.Core.Entities.Throw", b =>
                {
                    b.Navigation("PlayerThrows");
                });
#pragma warning restore 612, 618
        }
    }
}
