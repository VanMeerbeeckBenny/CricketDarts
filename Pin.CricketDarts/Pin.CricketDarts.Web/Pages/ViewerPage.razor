@page "/ViewerPage";
@inject IMatchService _matchService
@inject IPlayerService _playerService
@inject IPosibleThrowService _posibleThrowService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
<div class="viewer"></div>
    <div class="d-flex pt-3">

        <div class="d-flex flex-wrap w-50">
            @if (currentMatches != null && currentMatches.Any())
            {
                @foreach (var match in currentMatches)
                {
                    <div class="mb-3">
                        <ScoreBoard AllPosibleThrow="allPosibleThrow"
                                    PosibleBullThrows="posibleBullThrows"
                                    CurrentMatch="match"
                                    ShowButtons="false"></ScoreBoard>
                    </div>
                }

            }
        </div>
        @if (allPlayers != null && allPlayers.Any())
        {
            <div class="w-50">
                <div class="mb-4">
                    <TopStats newThrow="newThrow"
                              Devider="2"
                              allPlayers="allPlayers"
                              Title="Top Double"></TopStats>
                </div>
                <div>
                    <TopStats newThrow="newThrow"
                              Devider="3"
                              allPlayers="allPlayers"
                              Title="Top Triple"></TopStats>
                </div>
                <div>
                    <TopWonGames AllMatches="allMatches"
                                 NewWinner="newWinner">

                    </TopWonGames>
                </div>
            </div>
        }

    </div>

@code {
    private List<ScoresPerNumberModel> allPosibleThrow;
    private List<ScoreModel> posibleBullThrows;
    private List<DartsMatchModel> currentMatches = new();
    private List<DartsMatchModel> allMatches = new();
    private HubConnection hubConnection;
    private SignalRThrowModel newThrow;
    private List<DartsPlayerModel> allPlayers;
    private DartsPlayerWinModel newWinner;

    protected async override Task OnInitializedAsync()
    {

        allPosibleThrow = await _posibleThrowService.CreateAllThrows();
        posibleBullThrows = await _posibleThrowService.CreateAllBullThrows();
        allPlayers = await GetAllPlayers();
        await GetAllActiveMatch();
        await GetAllMatches();
        await ActivateSignalRSenders();
    }

    private async Task ActivateSignalRSenders()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/Cricket-darts"))
        .Build();


        await hubConnection.StartAsync();

        hubConnection.On<SignalRThrowModel>("SendThrow", (gameFact) =>
        {

            var foundMatch = currentMatches.FirstOrDefault(m => m.Id == gameFact.MatchId);
            if (foundMatch != null)
            {
                var dartsPlayer = foundMatch.PlayerOne.Id == gameFact.PlayerId ? foundMatch.PlayerOne : foundMatch.PlayerTwo;
                dartsPlayer.Throws.Add(gameFact.Throw);
                dartsPlayer.Score = gameFact.CurrentScore;
                if (gameFact.IsDone)
                {
                    currentMatches.Remove(foundMatch);
                }
                newThrow = gameFact;
                InvokeAsync(StateHasChanged);

            }

        });

        hubConnection.On<SignalRThrowModel>("SendRemoveThrow", (throwToRemove) =>
        {

            var foundMatch = currentMatches.FirstOrDefault(m => m.Id == throwToRemove.MatchId);
            if (foundMatch != null)
            {
                var dartsPlayer = foundMatch.PlayerOne.Id == throwToRemove.PlayerId ? foundMatch.PlayerOne : foundMatch.PlayerTwo;
                var foundThrows = dartsPlayer.Throws.Where(t => t.BaseNumber == throwToRemove.Throw.BaseNumber).ToList();
                foreach (var playerThrow in foundThrows)
                {
                    dartsPlayer.Throws.Remove(playerThrow);
                }                            
            
                InvokeAsync(StateHasChanged);

            }

        });

        hubConnection.On<DartsMatchModel>("SendMatch", (match) =>
        {

            var foundMatch = currentMatches.FirstOrDefault(m => m.Id == match.Id);
            if (foundMatch == null)
            {
                currentMatches.Add(match);
                allMatches.Add(match);

            }
            else currentMatches.Remove(foundMatch);
            InvokeAsync(StateHasChanged);

        });

        hubConnection.On<DartsPlayerModel>("SendWinner", async(player) =>
        {

            var newWinningPlayer = new DartsPlayerWinModel
            {
                Id = player.Id,
                Firstname = player.FirstName,
                Lastname = player.LastName,
                WonMatches = 1
            };
            newWinner = newWinningPlayer;
            await InvokeAsync(StateHasChanged);
            newWinner = null;

        });
    }

    private async Task<List<DartsPlayerModel>> GetAllPlayers() //Couldent use this inside topstats component as it would have issues in treathing.
                                                               //Its a little diffrent then convertToDartsPlayerModel
    {
        var allPlayersResult = await _playerService.GetAllPlayersAsync();
        if (allPlayersResult.IsSucces)
        {
            return allPlayersResult.Items.Select(p => new DartsPlayerModel
            {
                Id = p.Id,
                FirstName = p.Firstname,
                LastName = p.Lastname,
                Throws = p?.AllThrows.Select(at => new ThrowModel
                {
                    BaseNumber = (int)at.Score.OriginalScore,
                    Throw = (int)at.Score.Score,
                    TimeStamp = at.TimeStamp
                }).ToList() ?? new List<ThrowModel>()
            }).ToList();
        }
        else return null;
    }

    private async Task GetAllActiveMatch()
    {
        var resultActiveMatch = await _matchService.GetActiveMatches();
        DartsMatchModel currentMatch = new();
        if (resultActiveMatch.IsSucces)
        {
            var matches = resultActiveMatch.Items.ToList();
            foreach (var match in matches)
            {
                if (match.PlayerMatch.Count >= 2)
                {
                    var tempPlayers = match.PlayerMatch.Where(pm => pm.MatchId == match.Id).Select(pm => pm.Player).ToList();
                    var players = ConvertToDartsPlayerModel(tempPlayers, match.Id);

                    currentMatch = new DartsMatchModel
                    {
                        Id = match.Id,
                        IsActiveMatch = match.IsActiveGame,
                        PlayerOne = players[0],
                        PlayerTwo = players[1],
                    };
                    currentMatches.Add(currentMatch);
                }
            }


        }
    }

    private async Task GetAllMatches()
    {
        var resultAllMatch = await _matchService.GetAllAsync();
        if (resultAllMatch.IsSucces)
        {
            foreach (var match in resultAllMatch.Items)
            {
                var tempPlayer = match.PlayerMatch.Select(pm => pm.Player).ToList();
                var player = ConvertToDartsPlayerModel(tempPlayer, match.Id);
                DartsMatchModel dartsMatch = new DartsMatchModel
                {
                    Id = match.Id,
                    IsActiveMatch = match.IsActiveGame,
                    PlayerOne = player[0],
                    PlayerTwo = player[1]
                };
                allMatches.Add(dartsMatch);
            }
        }
    }


    private List<DartsPlayerModel> ConvertToDartsPlayerModel(List<Player> players, Guid matchId)
    {
        return players.Select(p => new DartsPlayerModel
        {
            Id = p.Id,
            FirstName = p.Firstname,
            LastName = p.Lastname,
            Throws = p.AllThrows.Where(at => at.MatchId == matchId)
                .Select(at => new ThrowModel
                {
                    BaseNumber = (int)at.Score.OriginalScore,
                    Throw = (int)at.Score.Score,
                    TimeStamp = at.TimeStamp

                }).ToList(),
            Score = p.Matches.FirstOrDefault(m => m.MatchId == matchId && m.PlayerId == p.Id).Score
        }).ToList();
    }
}
