@page "/ViewerPage";
@inject IMatchService _matchService
@inject IPlayerService _playerService
@inject IPosibleThrowService _posibleThrowService
<h3>ViewerPage</h3>
<div class="d-flex justify-content-between flex-wrap">
    @if (currentMatches != null && currentMatches.Any())
    {
        foreach (var match in currentMatches)
        {
            <ScoreBoard AllPosibleThrow="allPosibleThrow"
                        PosibleBullThrows="posibleBullThrows"
                        CurrentMatch="match"
                        ShowButtons="false"></ScoreBoard>
       
        }

    }
</div>
@code {
    private List<ScoresPerNumberModel> allPosibleThrow;
    private List<ScoreModel> posibleBullThrows;
    private List<DartsMatchModel> currentMatches = new();


    protected async override Task OnInitializedAsync()
    {

        allPosibleThrow = await _posibleThrowService.CreateAllThrows();
        posibleBullThrows = await _posibleThrowService.CreateAllBullThrows();
        await GetAllActiveMatch();
    }

    private List<DartsPlayerModel> ConvertToDartsPlayerModel(List<Player> players,Guid matchId)
    {
        return players.Select(p => new DartsPlayerModel
        {
            Id = p.Id,
            FirstName = p.Firstname,
            LastName = p.Lastname,
            Throws = p.AllThrows.Where(at => at.MatchId == matchId)
                .Select(at => new ThrowModel
                {
                    BaseNumber = (int)at.Score.OriginalScore,
                    Throw = (int)at.Score.Score,
                    TimeStamp = at.TimeStamp

                }).ToList(),
            Score = p.Matches.FirstOrDefault(m => m.MatchId == matchId && m.PlayerId == p.Id).Score
        }).ToList();
    }
    private async Task GetAllActiveMatch()
    {
        var resultActiveMatch = await _matchService.GetActiveMatches();
        DartsMatchModel currentMatch = new();
        if (resultActiveMatch.IsSucces)
        {
            var matches = resultActiveMatch.Items.ToList();
            foreach (var match in matches)
            {
                if (match.PlayerMatch.Count >= 2)
                {
                    var tempPlayers = match.PlayerMatch.Where(pm => pm.MatchId == match.Id).Select(pm => pm.Player).ToList();
                    var players = ConvertToDartsPlayerModel(tempPlayers, match.Id);

                    currentMatch = new DartsMatchModel
                    {
                        Id = match.Id,
                        IsActiveMatch = match.IsActiveGame,
                        PlayerOne = players[0],
                        PlayerTwo = players[1],
                    };
                    currentMatches.Add(currentMatch);
                }
            }


        }
    }
}
