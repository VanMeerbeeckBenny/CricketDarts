@page "/CommandCenter"
@inject IPlayerService _playerService
@inject IThrowService _throwService
@inject IPlayerThrowService _playerThrowService
@inject IMatchService _matchService
@inject NavigationManager navigation

<Error ErrorMessage="@error"></Error>
<LoadingScreen IsBusy="@isBusyLoadingIndicator"></LoadingScreen>
@if (allPosibleThrow != null)
{

    <div>
        <div class="d-flex justify-content-between flex-wrap">
            @foreach (var item in allPosibleThrow)
            {
                <DartSegment DataModel="item"
                             OnSelected="ProcessThrow"></DartSegment>
            }
        </div>
        <div class="d-flex justify-content-center mt-5" id="bull-container">
            <div id="outer-bull" class="d-flex justify-content-center align-items-center" @onclick="e => ProcessThrow(posibleBullThrows[0])">
                <div id="inner-bull" @onclick="e => ProcessThrow(posibleBullThrows[1])" @onclick:stopPropagation></div>
            </div>

        </div>
    </div>
    if (!string.IsNullOrWhiteSpace(gameIsDoneMessage))
    {
        <div class="mt-2">
            <div class="error-message  alert-success w-50 m-auto">
                <p class="text-success p-2 text-center">@gameIsDoneMessage</p>
            </div>
        </div>
    }
    @if (currentMatch != null && string.IsNullOrWhiteSpace(error))
    {

        <ScoreBoard AllPosibleThrow="allPosibleThrow"
                    PosibleBullThrows="posibleBullThrows"
                    CurrentMatch="currentMatch"></ScoreBoard>

    }

    <input type="button" class="btn btn-primary me-2 mb-3" @onclick="RedirectToAddPlayer" value="+Add Player" />
    <input type="button" class="btn btn-primary mb-3" @onclick="CreateCurrentMatch" value="New Match" />

}


@code {
    private DartsMatchModel currentMatch;
    private List<ScoresPerNumberModel> allPosibleThrow;
    private List<ScoreModel> posibleBullThrows;
    private string error = "";
    private bool isBusyLoadingIndicator;
    private string gameIsDoneMessage;


    private void RedirectToAddPlayer()
    {
        navigation.NavigateTo("/AddPlayer");
    }

    protected async override Task OnInitializedAsync()
    {
        await CreateAllThrows();
    }

    private async Task CreateAllThrows()
    {
        isBusyLoadingIndicator = true;
        var result = await _throwService.GetAll();
        if (result.IsSucces)
        {
            var groupedPoints = result.Items.GroupBy(p => p.OriginalScore)
                        .Select(group => group.ToList())
                        .ToList();

            var bull = groupedPoints[groupedPoints.Count - 1];
            posibleBullThrows = bull.Select(p => new ScoreModel
            {
                Id = p.Id,
                Score = (int)p.Score,
                BaseScore = (int)p.OriginalScore,
                Name = p.Score.ToString()
            }).ToList();

            groupedPoints.RemoveAt(groupedPoints.Count - 1);// remove bull as it is drawn difrent
            allPosibleThrow = CreateScorePerNumberModels(groupedPoints);
            isBusyLoadingIndicator = false;

        }
    }

    private List<ScoresPerNumberModel> CreateScorePerNumberModels(List<List<Point>> groupedPoints)
    {
        List<ScoresPerNumberModel> allPosibleThrow = new();

        foreach (var group in groupedPoints)
        {
            var scorePerNumber = new ScoresPerNumberModel
            {
                Name = group.FirstOrDefault().OriginalScore.ToString()
            };
            scorePerNumber.Single = new ScoreModel
            {
                Id = group[0].Id,
                Score = (int)group[0].Score,
                BaseScore = (int)group[0].OriginalScore,
                Name = group[0].OriginalScore.ToString()
            };
            scorePerNumber.Double = new ScoreModel
            {
                Id = group[1].Id,
                Score = (int)group[1].Score,
                BaseScore = (int)group[1].OriginalScore,
                Name = group[1].OriginalScore.ToString()
            };
            scorePerNumber.Triple = new ScoreModel
            {
                Id = group[2].Id,
                Score = (int)group[2].Score,
                BaseScore = (int)group[2].OriginalScore,
                Name = group[2].OriginalScore.ToString()
            };
            allPosibleThrow.Add(scorePerNumber);

        };

        return allPosibleThrow;
    }

    private async Task CreateCurrentMatch()
    {

        var result = await _playerService.GetAllPlayersAsync();
        int maxPlayerCount;
        Random random = new Random();
        currentMatch = new DartsMatchModel();

        List<DartsPlayerModel> valibleCandidated = new();

        if (result.IsSucces)
        {
            maxPlayerCount = result.Items.Count();
            var players = ConvertToDartsPlayerModel(result.Items.ToList());

            var playerOne = players.ElementAt(random.Next(0, maxPlayerCount));
            playerOne.IsActiveTurn = true;

            var availeblePlayersResult = await _playerService.GetApponentByPlayerId(playerOne.Id);
            if (availeblePlayersResult.IsSucces)
            {
                valibleCandidated = ConvertToDartsPlayerModel(availeblePlayersResult.Items.ToList());

                maxPlayerCount = valibleCandidated.Count();
                var playerTwo = valibleCandidated[random.Next(0, maxPlayerCount)];
                var createMatchResult = await _matchService.CreateAsync(playerOne.Id, playerTwo.Id);
                if (createMatchResult.IsSucces)
                {
                    currentMatch = createMatchResult.Items.Select(cm => new DartsMatchModel
                    {
                        PlayerOne = playerOne,
                        PlayerTwo = playerTwo,
                        Id = cm.Id,
                        IsActiveMatch = cm.IsActiveGame,
                    }).FirstOrDefault();
                    error = String.Empty;
                    gameIsDoneMessage = string.Empty;

                }
                else error = createMatchResult.ErrorMessage;



            }
            else error = availeblePlayersResult.ErrorMessage;
        };
    }

    private List<DartsPlayerModel> ConvertToDartsPlayerModel(List<Player> players)
    {
        return players.Select(p => new DartsPlayerModel
        {
            Id = p.Id,
            FirstName = p.Firstname,
            LastName = p.Lastname,
            Throws = new List<ThrowModel>()
        }).ToList();
    }

    private async Task ProcessThrow(ScoreModel score)
    {
        if (currentMatch != null)
        {

            var currentPlayer = currentMatch.PlayerOne.IsActiveTurn == true ? currentMatch.PlayerOne : currentMatch.PlayerTwo;

            var createResult = await _playerThrowService.CreateAsync(currentMatch.Id, currentPlayer.Id, score.Id);
            if (createResult.IsSucces)
            {
                var getResult = await _playerThrowService.GetByUserAndMatchIdAsync(currentMatch.Id, currentPlayer.Id);
                if (getResult.IsSucces)
                {
                    currentPlayer.Throws = getResult.Items.Select(t => new ThrowModel
                    {
                        BaseNumber = (int)t.Score.OriginalScore,
                        Throw = (int)t.Score.Score,
                        TimeStamp = t.TimeStamp
                    }).ToList();
                }
                await AddScore(currentPlayer,score);
            }
        }
        else error = "Please create a match!";

    }

    private bool CheckPlayerEligibiletyForAddingScore(DartsPlayerModel player, ScoreModel number)
    {

        DartsPlayerModel opponent = currentMatch.PlayerOne == player ? currentMatch.PlayerTwo : currentMatch.PlayerOne;
        bool shouldGetScore = false;

        foreach (var property in player.FinischedNumbers.GetType().GetProperties())
        {
            if (property.Name == number.Name || number.Name.Contains(property.Name)) //uitzondering voor bull
            {
                foreach (var opponentProperty in opponent.FinischedNumbers.GetType().GetProperties())
                {
                    if (property.Name == opponentProperty.Name &&
                        (bool)property.GetValue(player.FinischedNumbers) == true && (bool)opponentProperty.GetValue(opponent.FinischedNumbers) == false)
                    {
                        shouldGetScore = true;
                        break;
                    }
                }
                break;
            }
        }

        return shouldGetScore;
    }

    private async Task AddScore(DartsPlayerModel player, ScoreModel score)
    {
        if (player.Throws.Any())
        {
            var allThrowOfNumber = player.Throws.Where(t => t.BaseNumber == score.BaseScore).ToList();
            int total = allThrowOfNumber.Sum(a => a.Throw);
            int amountOfHits = total / score.BaseScore;

            if (amountOfHits >= 3)
            {
                foreach (var property in player.FinischedNumbers.GetType().GetProperties())
                {

                    if (property.Name == score.Name || score.Name.Contains(property.Name))//uitzondering voor bull
                    {
                        bool isFinischedBefore = (bool)property.GetValue(player.FinischedNumbers);
                        property.SetValue(player.FinischedNumbers, true);
                        bool shouldGetScore = CheckPlayerEligibiletyForAddingScore(player, score);
                        if (shouldGetScore)
                        {
                            if (isFinischedBefore) player.Score += score.Score;
                            else player.Score += total - score.BaseScore * 3;
                        }
                        var gameIsDone = CheckGameIsDone(player);
                        if (gameIsDone) await CloseGame(gameIsDone);
                        break;
                    }
                }
            }
        }
    }

    private async Task CloseGame(bool gameIsDone)
    {
        var winner = currentMatch.PlayerOne.Score > currentMatch.PlayerTwo.Score ? currentMatch.PlayerOne : currentMatch.PlayerTwo;
        var loser = currentMatch.PlayerOne.Score < currentMatch.PlayerTwo.Score ? currentMatch.PlayerOne : currentMatch.PlayerTwo;
        if (gameIsDone)
        {
            gameIsDoneMessage = $"The winner is {winner.FirstName}-{winner.LastName} with a score of {winner.Score} vs {loser.Score}!!";

            var result = await _matchService.UpdateAsync(currentMatch.Id, false, currentMatch.PlayerOne.Score, currentMatch.PlayerTwo.Score);
            if (result.IsSucces) currentMatch = null;
            else error = result.ErrorMessage;
        }
    }

    private bool CheckGameIsDone(DartsPlayerModel player)
    {

        DartsPlayerModel opponent = currentMatch.PlayerOne == player ? currentMatch.PlayerTwo : currentMatch.PlayerOne;
        if (CheckPlayerIsDone(player) && CheckPlayerIsDone(opponent)) return true;
        return false;
    }

    private bool CheckPlayerIsDone(DartsPlayerModel player)
    {
        bool IsDone = true;
        foreach (var property in player.FinischedNumbers.GetType().GetProperties())
        {
            IsDone = (bool)property.GetValue(player.FinischedNumbers);
            if (!IsDone)
            {
                break;
            }
        }

        return IsDone;
    }



}








