@inject IPlayerService _playerService

@if (filteredTopPlayers != null && filteredTopPlayers.Any())
{
    <h5>@Title</h5>
    <table class="table table-striped small">
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>       
            @foreach (var player in filteredTopPlayers)
            {
              
                <tr>
                    <td>@(filteredTopPlayers.IndexOf(player)+1)) @player.Firstname</td>
                    <td>@player.Lastname</td>
                    <td>@player.CountOfThrows</td>
                </tr>
                
            }
        </tbody>
    </table>
}
@code {
        [Parameter]
        public SignalRThrowModel newThrow { get; set; }
        [Parameter]
        public int Devider { get; set; }
    private List<TopScoreModel> topPlayers;
    private List<TopScoreModel> filteredTopPlayers;
    [Parameter]
    public List<DartsPlayerModel> allPlayers { get; set; }
    [Parameter]
    public string Title { get; set; }


    protected override void OnInitialized()
    {
        topPlayers = CreateTopPlayers(allPlayers);
    }

    protected override void OnParametersSet()
    {
        if (newThrow != null)
        {
            var foundPlayer = topPlayers.FirstOrDefault(t => t.PlayerId == newThrow.PlayerId);
            if (foundPlayer != null)
            {
                if (newThrow.Throw.Throw / newThrow.Throw.BaseNumber == Devider) foundPlayer.CountOfThrows += 1;
            }

        }
        if (topPlayers != null)
        {
            filteredTopPlayers = topPlayers.OrderByDescending(tp => tp.CountOfThrows)
                                   .Where(tp => tp.CountOfThrows > 0)
                                   .Take(5)
                                   .ToList();
        }
    }



    private List<TopScoreModel> CreateTopPlayers(List<DartsPlayerModel> allPlayers)
    {
        return allPlayers.Select(p => new TopScoreModel
        {
            PlayerId = p.Id,
            Firstname = p.FirstName,
            Lastname = p.LastName,
            CountOfThrows = p.Throws.Where(t => t.Throw / t.BaseNumber == Devider).Count()

        })

    .OrderByDescending(t => t.CountOfThrows)
    .ToList();
    }
}
