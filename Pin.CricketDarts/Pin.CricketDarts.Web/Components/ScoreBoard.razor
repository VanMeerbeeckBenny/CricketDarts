<div class="d-flex justify-content-center">
    <div class="d-flex flex-column w-75">
        <div class="d-flex flex-row w-100">
            <div class="playerOneSucces w-50 my-border-bottom">
                <span>@CurrentMatch.PlayerOne.FirstName @CurrentMatch.PlayerOne.LastName</span>
                <input type="button" class="btn btn-primary" value="Set player as active" @onclick="e => SetActivePlayer(CurrentMatch.PlayerOne)"/>
            </div>
            <div class="number-empty my-border-bottom"></div>
            <div class="playerTwoSucces w-50 ps-2 my-border-bottom">
                <span>@CurrentMatch.PlayerTwo.FirstName @CurrentMatch.PlayerTwo.LastName</span>
                <input type="button" class="btn btn-primary" value="Set player as active" @onclick="e => SetActivePlayer(CurrentMatch.PlayerTwo)" />
            </div>
        </div>
        @if (CurrentMatch != null)
        {
            @foreach (var number in AllPosibleThrow)
            {

                <div class="d-flex flex-row">
                    <div class="playerOneSucces w-50">@CheckThrows(CurrentMatch.PlayerOne, number.Single)</div>
                    <div class="number text-center">@number.Single.Score</div>
                    <div class="playerTwoSucces w-50 ps-1">@CheckThrows(CurrentMatch.PlayerTwo, number.Single)</div>
                </div>
            }}
        <div class="d-flex flex-row">
            <div class="playerOneSucces w-50">@CheckThrows(CurrentMatch.PlayerOne, PosibleBullThrows[0])</div>
            <div class="number text-center">Bull</div>
            <div class="playerTwoSucces w-50 ps-1">@CheckThrows(CurrentMatch.PlayerTwo, PosibleBullThrows[0])</div>
        </div>
        <div class="mt-2 my-border-bottom"><h5>Score</h5></div>
        <div class="d-flex flex-row w-100 pb-2">
            <div class="w-50">@CurrentMatch.PlayerOne.Score</div>
            <div class="w-50 ps-5">@CurrentMatch.PlayerTwo.Score</div>
        </div>

    </div>
</div>


@code {
    [Parameter]
    public DartsMatchModel CurrentMatch { get; set; }
    [Parameter]
    public List<ScoresPerNumberModel> AllPosibleThrow { get; set; }
    [Parameter]
    public List<ScoreModel> PosibleBullThrows { get; set; }
    [Parameter]
    public ScoreModel CurrentScore { get; set; }
    private DartsPlayerModel currentPlayer;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        currentPlayer = CurrentMatch.PlayerOne.IsActiveTurn ? CurrentMatch.PlayerOne : CurrentMatch.PlayerTwo;
        AddScore(currentPlayer);

    }
    private void SetActivePlayer(DartsPlayerModel playerToBeActive)
    {
        playerToBeActive.IsActiveTurn = true;
        var playerToBeDeactivated = CurrentMatch.PlayerOne == playerToBeActive ?  CurrentMatch.PlayerTwo : CurrentMatch.PlayerOne;
        playerToBeDeactivated.IsActiveTurn = false;

    }

    private MarkupString CheckThrows(DartsPlayerModel player,ScoreModel number)
    {
        var allThrowsOfPlayer = player.Throws.OrderBy(t => t.TimeStamp).ToList();
        var amountOfHits = 0;
        MarkupString result = new();

        for (int i = 0; i < allThrowsOfPlayer.Count; i++)
        {            
            var allThrowOfNumber = player.Throws.Where(t => t.BaseNumber == number.BaseScore).ToList();
            int total = allThrowOfNumber.Sum(a => a.Throw);
            amountOfHits = total / number.BaseScore;

            switch (amountOfHits)
            {
                case 0: result = (MarkupString) "<span></span>"; break;
                case 1: result = (MarkupString) "<i class=\"fas fa-slash\"></i>"; break;
                case 2: result = (MarkupString) "<i class=\"fas fa-times ps-1\"></i>"; break;
                default: result = (MarkupString)"<i class=\"far fa-times-circle\"></i>";break;
            }
        }

        return result;

    }



    private bool CheckPlayerEligibiletyForAddingScore(DartsPlayerModel player, ScoreModel number)
    {

        DartsPlayerModel opponent = CurrentMatch.PlayerOne == player ? CurrentMatch.PlayerTwo : CurrentMatch.PlayerOne;
        bool shouldGetScore = false;

        foreach (var property in player.FinischedNumbers.GetType().GetProperties())
        {
            if (property.Name == number.Name || number.Name.Contains(property.Name)) //uitzondering voor bull
            {
                foreach (var opponentProperty in opponent.FinischedNumbers.GetType().GetProperties())
                {
                    if (property.Name == opponentProperty.Name &&
                        (bool)property.GetValue(player.FinischedNumbers) == true && (bool)opponentProperty.GetValue(opponent.FinischedNumbers) == false)
                    {
                        shouldGetScore = true;
                        break;
                    }
                }
                break;
            }
        }

        return shouldGetScore;
    }

    private void AddScore(DartsPlayerModel player)
    {
        if (player.Throws.Any())
        {
            var allThrowOfNumber = player.Throws.Where(t => t.BaseNumber == CurrentScore.BaseScore).ToList();
            int total = allThrowOfNumber.Sum(a => a.Throw);
            int amountOfHits = total / CurrentScore.BaseScore;

            if (amountOfHits >= 3)
            {
                foreach (var property in player.FinischedNumbers.GetType().GetProperties())
                {

                    if (property.Name == CurrentScore.Name || CurrentScore.Name.Contains(property.Name))//uitzondering voor bull
                    {
                        bool isFinischedBefore = (bool)property.GetValue(player.FinischedNumbers);
                        property.SetValue(player.FinischedNumbers, true);
                        bool shouldGetScore = CheckPlayerEligibiletyForAddingScore(player, CurrentScore);
                        if (shouldGetScore)
                        {
                            if (isFinischedBefore) player.Score += CurrentScore.Score;
                            else player.Score += total - CurrentScore.BaseScore * 3;
                        }
                        break;
                    }
                }
            }
        }
    }


}
