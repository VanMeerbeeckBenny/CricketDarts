
<h3>ScoreBoard</h3>

<div class="d-flex flex-column w-100">
    <div class="d-flex flex-row w-100 border-bottom">
        <div class="playerOneSucces w-25">
            <span>@CurrentMatch.PlayerOne.FirstName @CurrentMatch.PlayerOne.LastName</span>
        </div>
        <div class="number"></div>
        <div class="playerTwoSucces w-25">
            <span>@CurrentMatch.PlayerTwo.FirstName @CurrentMatch.PlayerTwo.LastName</span>
        </div>
    </div>
    @if (CurrentMatch != null)
    {
    @foreach (var number in AllPosibleThrow)
    {
        
        <div class="d-flex flex-row p-2">
            <div class="playerOneSucces w-25">@CheckThrows(CurrentMatch.PlayerOne,number.Single)</div>
            <div class="number text-center">@number.Single.Score</div>
            <div class="playerTwoSucces">@CheckThrows(CurrentMatch.PlayerTwo, number.Single)</div>
        </div>
    }}
    <div class="d-flex flex-row">
        <div class="playerOneSucces w-25">@CheckThrows(CurrentMatch.PlayerOne, PosibleBullThrows[0])</div>
        <div class="number text-end">Bull</div>
        <div class="playerTwoSucces w-25">@CheckThrows(CurrentMatch.PlayerTwo, PosibleBullThrows[0])</div>
    </div>
    <div class="border-bottom">Score</div>
    <div class="d-flex flex-row w-50 pb-2">        
        <div class="w-75">@CurrentMatch.PlayerOne.Score</div>
        <div class="w-50">@CurrentMatch.PlayerOne.Score</div>
    </div>
    
</div>



@code {
    [Parameter]
    public DartsMatchModel CurrentMatch { get; set; }
    [Parameter]
    public List<ScoresPerNumberModel> AllPosibleThrow { get; set; }
    [Parameter]
    public List<ScoreModel> PosibleBullThrows { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

    }

    private MarkupString CheckThrows(DartsPlayerModel player,ScoreModel number)
    {
        var playerOnThrow = player.Throws.OrderBy(t => t.TimeStamp).ToList();
        var amountOfHits = 0;
        MarkupString result = new();

        for (int i = 0; i < playerOnThrow.Count; i++)
        {
            var currentThrow = playerOnThrow[i];
            var allThrowOfNumber = CurrentMatch.PlayerOne.Throws.Where(t => currentThrow.TimeStamp <= t.TimeStamp && t.BaseNumber == number.BaseScore).ToList();
            int total = allThrowOfNumber.Sum(a => a.Throw);
            amountOfHits = total / number.BaseScore;

            switch (amountOfHits)
            {
                case 0: result = (MarkupString) "<span></span>"; break;
                case 1: result = (MarkupString) "<i class=\"fas fa-slash\"></i>"; break;
                case 2: result = (MarkupString) "<i class=\"fas fa-times ps-1\"></i>"; break;
                default: result =(MarkupString)"<i class=\"far fa-times-circle\"></i>"; break;
            }
            return result;
        }

        return result;

    }
}
