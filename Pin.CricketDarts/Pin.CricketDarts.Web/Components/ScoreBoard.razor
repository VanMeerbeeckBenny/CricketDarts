<div class="d-flex justify-content-center">
    <div class="d-flex flex-column w-75">
        <div class="d-flex flex-row w-100">
            <div class="playerOneSucces w-50 my-border-bottom">
                <span>@CurrentMatch.PlayerOne.FirstName @CurrentMatch.PlayerOne.LastName</span>
            </div>
            <div class="number-empty my-border-bottom"></div>
            <div class="playerTwoSucces w-50 ps-2 my-border-bottom">
                <span>@CurrentMatch.PlayerTwo.FirstName @CurrentMatch.PlayerTwo.LastName</span>
            </div>
        </div>
        @if (CurrentMatch != null)
        {
            @foreach (var number in AllPosibleThrow)
            {

                <div class="d-flex flex-row">
                    <div class="playerOneSucces w-50">@CheckThrows(CurrentMatch.PlayerOne, number.Single)</div>
                    <div class="number text-center">@number.Single.Score</div>
                    <div class="playerTwoSucces w-50">@CheckThrows(CurrentMatch.PlayerTwo, number.Single)</div>
                </div>
            }}
        <div class="d-flex flex-row">
            <div class="playerOneSucces w-50">@CheckThrows(CurrentMatch.PlayerOne, PosibleBullThrows[0])</div>
            <div class="number text-center">Bull</div>
            <div class="playerTwoSucces w-50">@CheckThrows(CurrentMatch.PlayerTwo, PosibleBullThrows[0])</div>
        </div>
        <div class="mt-2 my-border-bottom"><h5>Score</h5></div>
        <div class="d-flex flex-row w-100 pb-2">
            <div class="w-75">@CurrentMatch.PlayerOne.Score</div>
            <div class="w-50">@CurrentMatch.PlayerOne.Score</div>
        </div>

    </div>
</div>


@code {
    [Parameter]
    public DartsMatchModel CurrentMatch { get; set; }
    [Parameter]
    public List<ScoresPerNumberModel> AllPosibleThrow { get; set; }
    [Parameter]
    public List<ScoreModel> PosibleBullThrows { get; set; }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

    }

    private MarkupString CheckThrows(DartsPlayerModel player,ScoreModel number)
    {
        var playerOnThrow = player.Throws.OrderBy(t => t.TimeStamp).ToList();
        var amountOfHits = 0;
        MarkupString result = new();

        for (int i = 0; i < playerOnThrow.Count; i++)
        {
            var currentThrow = playerOnThrow[i];
            var allThrowOfNumber = CurrentMatch.PlayerOne.Throws.Where(t => currentThrow.TimeStamp <= t.TimeStamp && t.BaseNumber == number.BaseScore).ToList();
            int total = allThrowOfNumber.Sum(a => a.Throw);
            amountOfHits = total / number.BaseScore;

            switch (amountOfHits)
            {
                case 0: result = (MarkupString) "<span></span>"; break;
                case 1: result = (MarkupString) "<i class=\"fas fa-slash\"></i>"; break;
                case 2: result = (MarkupString) "<i class=\"fas fa-times ps-1\"></i>"; break;
                default: result =(MarkupString)"<i class=\"far fa-times-circle\"></i>"; break;
            }
            return result;
        }

        return result;

    }
}
