@inject IPlayerService _playerService

@if (Players != null && Players.Any())
{
   <h5>TopWonGames</h5>
    <table class="table table-striped small">
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Wins</th>
                <th>Averige score</th>
            </tr>
        </thead>
        <tbody>
     
            @foreach (var player in Players)
            {
                if (player.WonMatches > 0)
                {
                <tr>
                    <td>@(Players.IndexOf(player) + 1)) @player.Firstname</td>
                    <td>@player.Lastname</td>
                    <td>@player.WonMatches</td>                  
                    <td>@player.AverageScore</td>                
                </tr>
                }
            }
        </tbody>
    </table>
}

@code{

    [Parameter]
    public List<DartsMatchModel> AllMatches { get; set;}
    [Parameter]
    public DartsPlayerWinModel NewWinner { get; set; }
    private List<DartsPlayerWinModel> Players = new();

    protected async override Task OnInitializedAsync()
    {
        foreach (var match in AllMatches.Where(am => !am.IsActiveMatch))
        {
            CheckWinner(match);
        }
        foreach (var player in Players)
        {
            player.AverageScore = await CalculatePlayerAverageScore(player.Id);
        }
        Players = Players.OrderByDescending(p => p.WonMatches)
                     .ThenByDescending(p => p.AverageScore)
                     .ToList();
    }


    private void CheckWinner(DartsMatchModel match)
    {
        if (!match.IsActiveMatch)
        {
            var winningPlayer = (bool)match.PlayerTwo.IsWon ? match.PlayerTwo : match.PlayerOne;
            var playerIsFound = Players.FirstOrDefault(p => p.Id == winningPlayer.Id);
            if (playerIsFound != null)
            {
                playerIsFound.AllScores.Add(winningPlayer.Score);
                playerIsFound.WonMatches++;

            }
            else
            {
                var newWinningPlayer = new DartsPlayerWinModel
                {
                    Id = winningPlayer.Id,
                    Firstname = winningPlayer.FirstName,
                    Lastname = winningPlayer.LastName,
                    WonMatches = 1,

                };
                newWinningPlayer.AllScores.Add(winningPlayer.Score);
                Players.Add(newWinningPlayer);
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(NewWinner != null)
        {
            var foundWinner = Players.FirstOrDefault(p => p.Id == NewWinner.Id);
            var foundLoser = Players.FirstOrDefault(p => p.Id == NewWinner.Loser.Id);
            if (foundWinner != null)
            {
                foundWinner.WonMatches++;
                foundWinner.AllScores.Add(NewWinner.CurrentScore);
            }
            else
            {
                NewWinner.AllScores.Add(NewWinner.CurrentScore);
                Players.Add(NewWinner);
            }

            if (foundLoser != null)
                foundLoser.AllScores.Add(NewWinner.Loser.Score);
            else
            {
                var loser = new DartsPlayerWinModel
                {
                    Id = NewWinner.Loser.Id,
                    Firstname = NewWinner.Loser.FirstName,
                    Lastname = NewWinner.Loser.LastName,
                    AverageScore = NewWinner.Loser.Score,
                    AllScores = new List<int> { NewWinner.Loser.Score },
                };
                Players.Add(loser);
            }


            foreach (var player in Players)
            {
                player.AverageScore = CalculatePlayerAverageScore(player);
            }
            Players = Players.OrderByDescending(p => p.WonMatches)
                             .ThenByDescending(p => p.AverageScore)
                             .ToList();
        }
    }

    private async Task<int> CalculatePlayerAverageScore(Guid id)
    {
        var result =await _playerService.GetPlayerByIdAsync(id);//Database works realybad when signalR is triggered
        if(result.IsSucces)
        {
            var player = result.Items.FirstOrDefault();
            List<int> scores = player.Matches.Select(m => m.Score).ToList();
            int averageScore = scores.Any() ? (int)Math.Round(scores.Average()) : 0;
            return averageScore;
        }
        return 0;
    }


    private int CalculatePlayerAverageScore(DartsPlayerWinModel player)//thats why i made this
    {
        player.AverageScore = player.AllScores.Any() ? (int)Math.Round(player.AllScores.Average()):0;
        return player.AverageScore;
    }




}
